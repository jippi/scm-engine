directive @generated on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @internal on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @expr(key: String!) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @graphql(key: String!) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

scalar Time
scalar Duration

type Context {
  Project: ContextProject @graphql(key: "project(fullPath: $project_id)")
  Group: ContextGroup @generated
  MergeRequest: ContextMergeRequest @generated
}

type ContextProject {
  ID: String!
  Name: String!
  NameWithNamespace: String!
  Description: String!
  Path: String!
  FullPath: String!
  Archived: Boolean!
  Topics: [String!]
  Visibility: String!
  Labels: [ContextLabel!] @generated
  LastActivityAt: Time!
  CreatedAt: Time!

  #
  # Internal state
  #

  MergeRequest: ContextMergeRequest @internal @graphql(key: "mergeRequest(iid: $mr_id)")
  ResponseLabels: ContextLabelNodes @internal @graphql(key: "labels(first: 200)")
  ResponseGroup: ContextGroup @internal @graphql(key: "group")
}

type ContextGroup {
  ID: String!
  Name: String!
  Description: String!
}

type ContextMergeRequest {
  ApprovalsLeft: Int!
  ApprovalsRequired: Int!
  Approved: Boolean!
  AutoMergeEnabled: Boolean!
  AutoMergeStrategy: String!
  Conflicts: Boolean!
  CreatedAt: Time!
  Description: String!
  DiffStats: [ContextMergeRequestDiffStat!]
  DivergedFromTargetBranch: Boolean!
  Draft: Boolean!
  FirstCommit: ContextCommit @generated()
  ID: String!
  IID: String!
  Labels: [ContextLabel!] @generated
  LastCommit: ContextCommit @generated()
  Mergeable: Boolean!
  MergedAt: Time
  MergeStatusEnum: String!
  SourceBranch: String!
  SourceBranchExists: Boolean!
  SourceBranchProtected: Boolean!
  Squash: Boolean!
  SquashOnMerge: Boolean!
  State: String!
  TargetBranch: String!
  TargetBranchExists: Boolean!
  TimeBetweenFirstAndLastCommit: Duration @generated()
  TimeSinceFirstCommit: Duration @generated()
  TimeSinceLastCommit: Duration @generated()
  Title: String!
  UpdatedAt: Time!

  #
  # Internal State
  #
  ResponseLabels: ContextLabelNodes @internal @graphql(key: "labels(first: 200)")
  ResponseFirstCommits: ContextCommitsNode @internal @graphql(key: "first_commit: commits(first:1)")
  ResponseLastCommits: ContextCommitsNode @internal @graphql(key: "last_commit: commits(last:1)")
}

type ContextCommit {
  AuthorEmail: String!
  CommittedDate: Time!
}

type ContextCommitsNode {
  Nodes: [ContextCommit!] @internal
}

type ContextLabel {
  ID: String!
  Title: String!
  Color: String!
  Description: String!
}

type ContextLabelNodes {
  Nodes: [ContextLabel!] @internal
}

type ContextMergeRequestDiffStat {
  Path: String!
  Additions: Int!
  Deletions: Int!
}
