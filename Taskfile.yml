# https://taskfile.dev

version: "3"

env:
  GO111MODULE: on
  GOPROXY: https://proxy.golang.org,direct

tasks:
  dev:
    desc: Setup git hooks
    cmds:
      - cp -f scripts/pre-commit.sh .git/hooks/pre-commit

  setup:
    desc: Install dependencies
    cmds:
      - go mod tidy
      - go generate ./...

  build:
    desc: Build the binary
    cmds:
      - go build -o scm-engine .
    sources:
      - ./**/*.go
    generates:
      - ./scm-engine

  docs:server:
    desc: Run Docs dev server with live preview
    cmds:
      - docker build -t scm-engine-docs -f Dockerfile.docs .
      - docker run --rm -it -p 8000:8000 -v ${PWD}:/docs scm-engine-docs serve

  docs:deploy:
    desc: Deploy GitHub pages docs
    cmds:
      - docker build -t scm-engine-docs -f Dockerfile.docs .
      - docker run --rm -v ${PWD}:/docs scm-engine-docs gh-deploy --force

  test:
    desc: Run tests
    env:
      LC_ALL: C
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      SOURCE_FILES: '{{default "./..." .SOURCE_FILES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.out {{.SOURCE_FILES}} -run {{.TEST_PATTERN}} -timeout=5m

  cover:
    desc: Open the cover tool
    cmds:
      - go tool cover -html=coverage.out

  fmt:
    desc: gofumpt all code
    cmds:
      - gofumpt -w -l .

  lint:
    desc: Lint the code with golangci-lint
    cmds:
      - golangci-lint run --config ./.golangci.yaml ./...

  ci:
    desc: Run all CI steps
    cmds:
      - task: setup
      - task: build
      - task: test

  default:
    desc: Runs the default tasks
    cmds:
      - task: ci

  release:
    desc: Create a new tag
    vars:
      NEXT:
        sh: svu n
    cmds:
      - task: setup
      - git tag {{.NEXT}}
      - echo {{.NEXT}}
      - git push origin --tags

  scm-engine:test:pkg:
    desc: Test a package
    cmds:
      - docker run --platform linux/{{ .Platform }} --rm --workdir /tmp -v $PWD/dist:/tmp {{ .Image }} sh -c '{{ .Cmd }} && scm-engine'

  scm-engine:test:rpm:
    desc: Tests rpm packages
    vars:
      rpm: "rpm --nodeps -ivh"
    cmds:
      - task: scm-engine:test:pkg
        vars:
          Platform: "386"
          Image: centos:centos7
          Cmd: "{{.rpm}} scm-engine-*.i386.rpm"
      - task: scm-engine:test:pkg
        vars:
          Platform: "amd64"
          Image: fedora
          Cmd: "{{.rpm}} scm-engine-*.x86_64.rpm"
      - task: scm-engine:test:pkg
        vars:
          Platform: "arm64"
          Image: fedora
          Cmd: "{{.rpm}} scm-engine-*.aarch64.rpm"

  scm-engine:test:deb:
    desc: Tests deb packages
    vars:
      dpkg: "dpkg --ignore-depends=git -i"
    cmds:
      - task: scm-engine:test:pkg
        vars:
          Platform: "amd64"
          Image: ubuntu
          Cmd: "{{.dpkg}} scm-engine*_amd64.deb"
      - task: scm-engine:test:pkg
        vars:
          Platform: "arm64"
          Image: ubuntu
          Cmd: "{{.dpkg}} scm-engine*_arm64.deb"
      - task: scm-engine:test:pkg
        vars:
          Platform: "arm/7"
          Image: ubuntu
          Cmd: "{{.dpkg}} scm-engine*_armhf.deb"

  scm-engine:test:apk:
    desc: Tests apk packages
    vars:
      apk: "apk add --allow-untrusted -U"
    cmds:
      - task: scm-engine:test:pkg
        vars:
          Platform: "386"
          Image: alpine
          Cmd: "{{.apk}} scm-engine*_x86.apk"
      - task: scm-engine:test:pkg
        vars:
          Platform: "amd64"
          Image: alpine
          Cmd: "{{.apk}} scm-engine*_x86_64.apk"
      - task: scm-engine:test:pkg
        vars:
          Platform: "arm64"
          Image: alpine
          Cmd: "{{.apk}} scm-engine*_aarch64.apk"
      - task: scm-engine:test:pkg
        vars:
          Platform: "arm/7"
          Image: alpine
          Cmd: "{{.apk}} scm-engine*_armv7.apk"

  scm-engine:test:
    desc: Test built linux packages
    cmds:
      - task: scm-engine:test:apk
      - task: scm-engine:test:deb
      - task: scm-engine:test:rpm

  goreleaser:
    desc: Run GoReleaser either in snapshot or release mode
    deps:
      - build
    vars:
      SNAPSHOT:
        sh: 'if [[ $GITHUB_REF != refs/tags/v* ]]; then echo "--snapshot"; fi'
    cmds:
      - goreleaser release --clean --timeout 60m {{ .SNAPSHOT }}

  nightly:
    cmds:
      - gh run list --workflow=nightly.yml
      - gh workflow run nightly.yml
      - sleep 30
      - gh run watch
