{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About scm-engine","text":"<p>What is <code>scm-engine</code>?</p> <p>SCM Engine allow for easy Merge Request automation within your GitLab projects.</p> <p>Automatically add/remove labels depending on files changes, the age of the Merge Request, who contributes, and pretty much anything else you could want.</p> <p>You can even take actions such as (but not limited to) closing the Merge Request, approve it, or add a comment.</p> <p>SCM engine can be run either as a regular CI job in your pipeline, or be triggered through the Webhook system, allowing for versatile and flexible deployments.</p>"},{"location":"#what-does-it-look-like","title":"What does it look like?","text":"<p>Please see the Configuration Examples page for more use-cases</p> <p>Please see the Configuration Options page for all options and explanations</p> <pre><code># See: https://getbootstrap.com/docs/5.3/customize/color/#all-colors\n\nactions:\n  # NOTE: depends on the \"stale\" label further down in the document\n  - name: Warn if the Merge Request haven't had commit activity for 21 days and will be closed\n    if: |1\n           merge_request.state_is(\"opened\")\n        &amp;&amp; merge_request.has_no_label(\"stale\")\n        &amp;&amp; merge_request.has_no_label(\"do-not-close\")\n        &amp;&amp; merge_request.has_no_user_activity_within(\"21d\")\n    then:\n      - action: add_label\n        name: stale\n\n      - action: comment\n        message: |\n          :wave: Hello!\n\n          This MR has not seen any commit activity for 21 days.\n          We will automatically close the MR after 28 days.\n\n          To disable this behavior, add the `do-not-close` label to the\n          MR in the right menu or add comment with `/label ~\"do-not-close\"`\n\n  # NOTE: depends on the \"stale\" label further down in the document\n  - name: Close the Merge Request if it haven't had commit activity for 28 days\n    if: |1\n           merge_request.state_is(\"opened\")\n        &amp;&amp; merge_request.has_label(\"stale\")\n        &amp;&amp; merge_request.has_no_label(\"do-not-close\")\n        &amp;&amp; merge_request.has_no_activity_within(\"7d\")\n    then:\n      - action: close\n\n      - action: comment\n        message: |\n          :wave: Hello!\n\n          This MR has not seen any commit activity for 28 days.\n          To keep our project clean, we will close the Merge request now.\n\n          To disable this behavior, add the `do-not-close` label to the\n          MR in the right menu or add comment with `/label ~\"do-not-close\"`\n\n  - name: Approve MR if the 'break-glass-approve' label is configured\n    if: |1\n         merge_request.state != \"closed\"\n      &amp;&amp; not merge_request.approved\n      &amp;&amp; merge_request.has_label(\"break-glass-approve\")\n    then:\n      - action: approve\n\n      - action: comment\n        message: \"Approving the MR since it has the 'break-glass-approve' label. Talk to ITGC about this!\"\n\nlabel:\n  - name: stale\n    color: $red\n    script: |1\n           merge_request.state_is(\"opened\")\n        &amp;&amp; merge_request.has_no_label(\"do-not-close\")\n        &amp;&amp; merge_request.has_no_user_activity_within(\"21d\")\n\n  - name: lang/go\n    color: $indigo\n    script: merge_request.modified_files(\"*.go\")\n\n  - name: lang/markdown\n    color: $indigo\n    description: Modified MarkDown files\n    script: merge_request.modified_files(\"*.md\")\n\n  - name: dependencies/go\n    color: $orange\n    description: Updated Go dependency files go.mod or go.sum\n    script: merge_request.modified_files(\"go.mod\", \"go.sum\")\n\n  - name: type/ci\n    color: $green\n    description: Modified CI files\n    script: merge_request.modified_files(\".gitlab-ci.yml\") || merge_request.modified_files(\"build/\")\n\n  - name: type/deployment\n    color: $green\n    description: Modified Deployment files\n    script: merge_request.modified_files(\"_infrastructure/\", \"scripts/\", \"configs/\")\n\n  - name: type/documentation\n    color: $green\n    description: Modified Documentation files\n    script: merge_request.modified_files(\"docs/\")\n\n  - name: type/services\n    color: $green\n    description: Modified pkg/services files\n    script: merge_request.modified_files(\"internal/pkg/services\")\n\n  # NOTE: This label assume your GitLab supports scoped labels\n  #       See: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels\n  - name: go::tests::missing\n    color: $red\n    description: The Merge Request did NOT modify Go test files\n    priority: 999\n    script: not merge_request.modified_files(\"*_test.go\") &amp;&amp; merge_request.modified_files(\"*.go\")\n\n  # NOTE: This label assume your GitLab supports scoped labels\n  #       See: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels\n  - name: go::tests::OK\n    color: $green\n    description: The Merge Request modified Go test files\n    priority: 999\n    script: merge_request.modified_files(\"*_test.go\") &amp;&amp; merge_request.modified_files(\"*.go\")\n\n  # NOTE: This label assume your GitLab supports scoped labels\n  #       See: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels\n  - name: status::age::abandoned\n    color: $red\n    description: The most recent commit is older than 45 days\n    priority: 999\n    script: merge_request.time_since_last_commit &gt; duration(\"45d\")\n    skip_if: merge_request.state in [\"merged\", \"closed\", \"locked\"]\n\n  # NOTE: This label assume your GitLab supports scoped labels\n  #       See: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels\n  - name: status::age::stale\n    color: $red\n    description: The most recent commit is older than 30 days\n    priority: 999\n    script: duration(\"30d\") &lt; merge_request.time_since_last_commit &lt; duration(\"45d\")\n    skip_if: merge_request.state in [\"merged\", \"closed\", \"locked\"]\n\n  # NOTE: This label assume your GitLab supports scoped labels\n  #       See: https://docs.gitlab.com/ee/user/project/labels.html#scoped-labels\n  - name: status::age::old\n    color: $red\n    description: The most recent commit is older than 14 days\n    priority: 999\n    script: duration(\"14d\") &lt; merge_request.time_since_last_commit &lt; duration(\"30d\")\n    skip_if: merge_request.state in [\"merged\", \"closed\", \"locked\"]\n\n  # generate labels for services\n  #\n  # internal/service/vault/client.go\n  # =&gt;\n  # service/vault\n  - strategy: generate\n    description: Modified this a service directory\n    color: $pink\n    script: &gt;\n      merge_request.modified_files_list(\"internal/service/\")\n      | map({ filepath_dir(#) })\n      | map({ trimPrefix(#, \"internal/\") })\n      | uniq()\n\n  # generate labels for commands\n  #\n  # internal/app/my-command/subcommands/aws/login/login.go\n  # =&gt;\n  # command/aws/login\n  - strategy: generate\n    description: Modified this my-command command\n    color: $purple\n    script: &gt;\n      merge_request.modified_files_list(\"internal/app/my-command/subcommands/\")\n      | map({ filepath_dir(#) })\n      | map({ trimPrefix(#, \"internal/app/my-command/subcommands/\") })\n      | map({ string(\"command/\" + #) })\n      | uniq()\n</code></pre>"},{"location":"configuration/","title":"Configuration file","text":"<p>The default configuration filename is <code>.scm-engine.yml</code>, either in current working directory, or if you are in a Git repository, the root of the project.</p> <p>The file path can be changed via <code>--config</code> CLI flag and <code>$SCM_ENGINE_CONFIG_FILE</code> environment variable.</p>"},{"location":"configuration/#ignore_activity_from","title":"<code>ignore_activity_from</code>","text":"<p>What is 'activity'?</p> <p>SCM-Engine defines activity as comments, reviews, commits, adding/removing labels and similar actions made on a change request.</p> <p>Generally, <code>activity</code> is what you see in the Merge/Pull Request <code>timeline</code> in the browser UI.</p> <p>Configure what users that should be ignored when considering activity on a Merge Request</p>"},{"location":"configuration/#ignore_activity_from.bots","title":"<code>ignore_activity_from.bots</code>","text":"<p>Should <code>bot</code> users be ignored when considering activity? Default: <code>false</code></p>"},{"location":"configuration/#ignore_activity_from.usernames","title":"<code>ignore_activity_from.usernames[]</code>","text":"<p>A list of usernames that should be ignored when considering user activity. Default: <code>[]</code></p>"},{"location":"configuration/#ignore_activity_from.emails","title":"<code>ignore_activity_from.emails[]</code>","text":"<p>A list of emails that should be ignored when considering user activity. Default: <code>[]</code></p> <p>NOTE: If a user do not have a public email configured on their profile, that users activity will never match this rule.</p>"},{"location":"configuration/#include","title":"<code>include[]</code>","text":"<p>What are includes?</p> <p><code>scm-engine</code> has support for importing some (or all) of its configuration from other repositories.</p> <p>The <code>scm-engine</code> API token MUST be able to read the content of the referenced projects via the API</p> <p>Limitations and restrictions of remote included configuration files</p> <p>This is immensely useful if you want to share configuration between many projects, like a centralized <code>scm-engine-library</code> project with common patterns and configuration files.</p> <ul> <li>Only <code>actions</code> and <code>label</code> configurations keys are supported in included configuration files.</li> <li>Nested/Recursive includes are NOT support.</li> <li>Merging/overriding configurations are NOT supported; included configuration will always append to the existing configuration.</li> <li>All included files MUST exist and be valid; any missing file or invalid configuration will result in failure.</li> <li><code>scm-engine</code> will read all files from a project in a single request where possible; up to 100 files are supported.</li> <li><code>scm-engine</code> do NOT cache any remote configuration files; they are always read during evaluation cycle.</li> </ul> <p>Example 'include' configuration loading 4 files from the 'platform/scm-engine-library' project</p> <pre><code>include:\n  - project: platform/scm-engine-library\n    files:\n      - label/change-type.yml\n      - label/last-commit-age.yml\n      - label/need-rebase.yml\n      - life-cycle/close-merge-request-3-weeks.yml\n\n  label:\n    - ....\n\n  actions:\n    - ...\n</code></pre>"},{"location":"configuration/#include.project","title":"<code>include[].project</code>","text":"<p>The GitLab repository slug to read configuration files, like <code>example/project</code>.</p>"},{"location":"configuration/#include.files","title":"<code>include[].files</code>","text":"<p>The list of files to include from the project. The paths must be relative to the repository root, e.x. <code>label/some-config-file.yml</code>; NOT <code>/label/some-config-file.yml</code></p>"},{"location":"configuration/#include.ref","title":"<code>include[].ref</code>","text":"<p>Optional Git reference to read the configuration from; it can be a tag, branch, or commit SHA.</p> <p>If omitted, <code>HEAD</code> is used; meaning your default branch.</p>"},{"location":"configuration/#actions","title":"<code>actions[]</code>","text":"<p>What are actions?</p> <p>Actions can modify a Merge Request in various ways, for example, adding a comment or closing the Merge Request.</p> <p>Due to actions powerful and flexible capabilities, they can be a bit harder to get right than adding and removing labels.</p> <p>Please see the examples page for use-cases.</p> <p>The <code>actions</code> key is a list of actions that can be taken on a Merge Request.</p>"},{"location":"configuration/#actions.name","title":"<code>actions[].name</code>","text":"<p>The name of the action, this is purely for debugging and your convenience.</p> <p>It's encouraged to be descriptive of the actions.</p>"},{"location":"configuration/#actions.if","title":"<code>actions[].if</code>","text":"<p>This field must be a valid Expr lang script</p> <p>Please see the following pages for more information:</p> <ul> <li>Expr lang documentation</li> <li><code>scm-engine</code> attributes, functions, and examples</li> </ul> <p>The script must return a <code>boolean</code></p> <p>A key controlling if the action should executed or not.</p>"},{"location":"configuration/#actions.if.then","title":"<code>actions[].if.then[]</code>","text":"<p>The list of operations to take if the <code>action.if</code> returned <code>true</code>.</p>"},{"location":"configuration/#actions.if.then.action","title":"<code>actions[].if.then[].action</code>","text":"<p>This key controls what kind of action that should be taken.</p> <ul> <li><code>approve</code> to approve the Merge Request.</li> <li><code>unapprove</code> to approve the Merge Request.</li> <li><code>close</code> to close the Merge Request.</li> <li><code>reopen</code> to reopen the Merge Request.</li> <li> <p><code>comment</code> to add a comment to the Merge Request</p> <p>Additional fields:</p> <ul> <li>(required) <code>message</code> The message that will be commented on the Merge Request.</li> </ul> 'comment' example<pre><code>- action: comment\n  message: |\n    Hello world\n</code></pre> </li> <li> <p><code>lock_discussion</code> to prevent further discussions on the Merge Request.</p> </li> <li><code>unlock_discussion</code> to allow discussions on the Merge Request.</li> <li> <p><code>add_label</code> to add an existing label to the Merge Request</p> <p>Additional fields:</p> <ul> <li>(required) <code>label</code> The label name to add.</li> </ul> add_label example<pre><code>- action: add_label\n  label: example\n</code></pre> </li> <li> <p><code>remove_label</code> to remove a label from the Merge Request</p> <p>Additional fields:</p> <ul> <li>(required) <code>label</code> The label name to add.</li> </ul> remove_label example<pre><code>- action: remove_label\n  label: example\n</code></pre> </li> <li> <p><code>update_description</code> updates the Merge Request Description</p> <p>Additional fields:</p> <ul> <li>(required) <code>replace</code> A list of key/value pairs to replace in the description. The <code>key</code> is the raw string to replace in the Merge Request description. The <code>value</code> is an Expr Lang expression returning a <code>string</code> that <code>key</code> will be replaced with - all Script Attributes and Script Functions are available within the script.</li> </ul> update_description example<pre><code>- action: update_description\n  replace:\n    \"${{CI_MERGE_REQUEST_IID}}\": \"merge_request.iid\"\n</code></pre> </li> </ul>"},{"location":"configuration/#label","title":"<code>label[]</code>","text":"<p>What are labels?</p> <p>Labels are a way to categorize and filter issues, merge requests, and epics in GitLab.   -- GitLab documentation</p> <p>The <code>label</code> key is a list of the labels you want to manage.</p> <p>These keys are shared between the <code>conditional</code> and <code>generate</code> label strategy. (more above these below!)</p>"},{"location":"configuration/#label.strategy","title":"<code>label[].strategy</code>","text":"<p>SCM Engine supports two strategies for managing labels, each changes the behavior of the <code>script</code>.</p> <ul> <li> <p><code>conditional</code> (default, if <code>strategy</code> key is omitted), where you provide the <code>name</code> of the label, and a <code>script</code> that returns a boolean for wether the label should be added to the Merge Request.</p> <p>The <code>script</code> must return a <code>boolean</code> value, where <code>true</code> mean <code>add the label</code> and <code>false</code> mean <code>remove the label</code>.</p> </li> <li> <p><code>generate</code>, where your <code>script</code> generates the list of labels that should be added to the Merge Request.</p> <p>The <code>script</code> must return a <code>list of strings</code>, where each label returned will be added to the Merge Request.</p> </li> </ul>"},{"location":"configuration/#label.strategy-conditional","title":"<code>label[].strategy = conditional</code>","text":"<p>Use the <code>conditional</code> strategy when you want to add/remove a label on a Merge Request depending on something. It's the default strategy, and the most simple one to use.</p> <p>Please see the Add label if a file extension is modified example for how to use this</p>"},{"location":"configuration/#label.strategy-generate","title":"<code>label[].strategy = generate</code>","text":"<p>Use the <code>generate</code> strategy if you want to create dynamic labels, for example, depending labels based on the file structure within your project.</p> <p>Thanks to the dynamic nature of the <code>generate</code> strategy, it has fantastic flexibility, at the cost of greater complexity.</p> <p>Please see the generate labels from directory layout example for how to use this</p>"},{"location":"configuration/#label.name","title":"<code>label[].name</code>","text":"<ul> <li> <p>When using <code>label.strategy: conditional</code></p> <p>REQUIRED The <code>name</code> of the label to create.</p> </li> <li> <p>When using <code>label.strategy: generate</code></p> <p>OMITTED The <code>name</code> field must not be set when using the <code>generate</code> strategy.</p> </li> </ul>"},{"location":"configuration/#label.script","title":"<code>label[].script</code>","text":"<p>This field must be a valid Expr lang script</p> <p>Please see the following pages for more information:</p> <ul> <li>Expr lang documentation</li> <li><code>scm-engine</code> attributes, functions, and examples</li> </ul> <p>Depending on the <code>label.strategy:</code> used, the behavior of the script changes, read more about this below.</p>"},{"location":"configuration/#label.color","title":"<code>label[].color</code>","text":"<p>Note</p> <p>When used on <code>strategy: generate</code> labels, all generated labels will have the same color.</p> <p><code>color</code> is a mandatory field, controlling the background color of the label when viewed in the User Interface.</p> <p>You can either provide your own <code>hex</code> value (e.g, <code>#FFFF00</code>) or use the Twitter Bootstrap color variables, for example<code>$blue-500</code> and <code>$teal</code>.</p>"},{"location":"configuration/#label.description","title":"<code>label[].description</code>","text":"<p>When used on <code>strategy: generate</code> labels, all generated labels will have the same description.</p> <p>An optional key that sets the description field for the label within GitLab.</p> <p>Descriptions are shown in the User Interface when you hover any label.</p>"},{"location":"configuration/#label.priority","title":"<code>label[].priority</code>","text":"<p>When used on <code>strategy: generate</code> labels, all generated labels will have the same priority.</p> <p>An optional key that controls the GitLab Label Priority.</p>"},{"location":"configuration/#label.skip_if","title":"<code>label[].skip_if</code>","text":"<p>This field must be a valid Expr lang script</p> <p>Please see the following pages for more information:</p> <ul> <li>Expr lang documentation</li> <li><code>scm-engine</code> attributes, functions, and examples</li> </ul> <p>The script must return a <code>boolean</code> value</p> <p>An optional key controlling if the label should be skipped (meaning no removal or adding of labels).</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#docker","title":"Docker","text":"<pre><code>docker run --rm ghcr.io/jippi/scm-engine\n</code></pre>"},{"location":"install/#homebrew-tap","title":"homebrew tap","text":"<pre><code>brew install jippi/tap/scm-engine\n</code></pre>"},{"location":"install/#apt","title":"apt","text":"<pre><code>echo 'deb [trusted=yes] https://pkg.jippi.dev/apt/ * *' | sudo tee /etc/apt/sources.list.d/scm-engine.list\nsudo apt update\nsudo apt install scm-engine\n</code></pre>"},{"location":"install/#yum","title":"yum","text":"<pre><code>echo '[scm-engine]\nname=scm-engine\nbaseurl=https://pkg.jippi.dev/yum/\nenabled=1\ngpgcheck=0' | sudo tee /etc/yum.repos.d/scm-engine.repo\nsudo yum install scm-engine\n</code></pre>"},{"location":"install/#snapcraft","title":"snapcraft","text":"<pre><code>sudo snap install scm-engine\n</code></pre>"},{"location":"install/#scoop","title":"scoop","text":"<pre><code>scoop bucket add scm-engine https://github.com/jippi/scoop-bucket.git\nscoop install scm-engine\n</code></pre>"},{"location":"install/#aur","title":"aur","text":"<pre><code>yay -S scm-engine-bin\n</code></pre>"},{"location":"install/#deb-rpm-and-apk-packages","title":"deb, rpm and apk packages","text":"<p>Download the <code>.deb</code>, <code>.rpm</code> or <code>.apk</code> packages from the releases page and install them with the appropriate tools.</p>"},{"location":"install/#go-install","title":"go install","text":"<pre><code>go install github.com/jippi/scm-engine/cmd@latest\n</code></pre>"},{"location":"github/commands/","title":"Commands","text":""},{"location":"github/commands/#scm-engine","title":"<code>scm-engine</code>","text":"<pre><code>NAME:\n   scm-engine - GitHub/GitLab automation\n\nUSAGE:\n   scm-engine [global options] command [command options]\n\nVERSION:\n   dev (date: unknown; commit: unknown)\n\nAUTHOR:\n   Christian Winther &lt;scm-engine@jippi.dev&gt;\n\nCOMMANDS:\n   gitlab      GitLab related commands\n   github      GitHub related commands\n   jsonschema  \n   help, h     Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n\nCOPYRIGHT:\n   Christian Winther\n</code></pre>"},{"location":"github/commands/#scm-engine-github","title":"<code>scm-engine github</code>","text":"<pre><code>NAME:\n   scm-engine github - GitHub related commands\n\nUSAGE:\n   scm-engine github command [command options]\n\nCOMMANDS:\n   evaluate  Evaluate a Pull Request\n   help, h   Shows a list of commands or help for one command\n\nOPTIONS:\n   --api-token value  GitHub API token [$SCM_ENGINE_TOKEN]\n   --base-url value   Base URL for the SCM instance (default: \"https://api.github.com/\") [$SCM_ENGINE_BASE_URL]\n   --help, -h         show help\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n</code></pre>"},{"location":"github/commands/#scm-engine-github-evaluate","title":"<code>scm-engine github evaluate</code>","text":"<pre><code>NAME:\n   scm-engine github evaluate - Evaluate a Pull Request\n\nUSAGE:\n   scm-engine github evaluate [command options]  [pr_id, pr_id, ...]\n\nOPTIONS:\n   --project value  GitHub project (example: 'jippi/scm-engine') [$GITHUB_REPOSITORY]\n   --id value       The Pull Request ID to process, if not provided as a CLI flag [$SCM_ENGINE_PULL_REQUEST_ID]\n   --commit value   The git commit sha [$GITHUB_SHA]\n   --help, -h       show help\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n</code></pre>"},{"location":"github/script-attributes/","title":"Script Attributes","text":"<p>The Expr Language Definition is a great resource to learn more about the language</p> <p>Note</p> <p>Missing an attribute? The <code>schema/gitlab.schema.graphqls</code> file are what is used to query GitLab, adding the missing <code>field</code> to the right <code>type</code> should make it accessible. Please open an issue or Pull Request if something is missing.</p> <p>The following attributes are available in <code>script</code> fields.</p> <p>They can be accessed exactly as shown in this list.</p>"},{"location":"github/script-attributes/#repository","title":"<code>repository</code>","text":"<p>The project the Pull Request belongs to</p> <ul> <li><code>repository.allow_update_branch</code> ; <code>boolean</code>. Whether or not a Pull Request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging</li> <li><code>repository.archived_at</code> ; <code>optional time</code>. Identifies the date and time when the repository was archived</li> <li><code>repository.auto_merge_allowed</code> ; <code>boolean</code>. Whether or not Auto-merge can be enabled on Pull Requests in this repository</li> <li><code>repository.created_at</code> ; <code>time</code>. Identifies the date and time when the object was created</li> <li><code>repository.delete_branch_on_merge</code> ; <code>boolean</code>. Whether or not branches are automatically deleted when merged in this repository</li> <li><code>repository.description</code> ; <code>optional string</code>. The description of the repository</li> <li><code>repository.has_discussions_enabled</code> ; <code>boolean</code>. Indicates if the repository has the Discussions feature enabled</li> <li><code>repository.has_issues_enabled</code> ; <code>boolean</code>. Indicates if the repository has issues feature enabled</li> <li><code>repository.has_projects_enabled</code> ; <code>boolean</code>. Indicates if the repository has the Projects feature enabled</li> <li><code>repository.has_wiki_enabled</code> ; <code>boolean</code>. Indicates if the repository has wiki feature enabled</li> <li><code>repository.id</code> ; <code>string</code>. The Node ID of the Repository object</li> <li><code>repository.is_archived</code> ; <code>boolean</code>. Indicates if the repository is unmaintained</li> <li><code>repository.is_blank_issues_enabled</code> ; <code>boolean</code>. Returns true if blank issue creation is allowed</li> <li><code>repository.is_disabled</code> ; <code>boolean</code>. Returns whether or not this repository disabled</li> <li><code>repository.is_fork</code> ; <code>boolean</code>. Identifies if the repository is a fork</li> <li><code>repository.is_locked</code> ; <code>boolean</code>. Indicates if the repository has been locked or not</li> <li><code>repository.is_mirror</code> ; <code>boolean</code>. Identifies if the repository is a mirror</li> <li><code>repository.is_private</code> ; <code>boolean</code>. Identifies if the repository is private or internal</li> <li><code>repository.is_template</code> ; <code>boolean</code>. Identifies if the repository is a template that can be used to generate new repositories</li> <li><code>repository.is_user_configuration_repository</code> ; <code>boolean</code>. Is this repository a user configuration repository</li> <li><code>repository.merge_commit_allowed</code> ; <code>boolean</code>. Whether or not PRs are merged with a merge commit on this repository</li> <li><code>repository.name</code> ; <code>string</code>. The name of the repository</li> <li><code>repository.name_with_owner</code> ; <code>string</code>. The repository's name with owner</li> <li><code>repository.pushed_at</code> ; <code>optional time</code>. Identifies the date and time when the repository was last pushed to</li> <li><code>repository.rebase_merge_allowed</code> ; <code>boolean</code>. Whether or not rebase-merging is enabled on this repository</li> <li><code>repository.resource_path</code> ; <code>string</code>. The HTTP path for this repository</li> <li><code>repository.squash_merge_allowed</code> ; <code>boolean</code>. Whether or not squash-merging is enabled on this repository</li> <li><code>repository.stargazer_count</code> ; <code>int</code>. Returns a count of how many stargazers there are on this object</li> <li><code>repository.updated_at</code> ; <code>time</code>. Identifies the date and time when the object was last updated</li> <li><code>repository.url</code> ; <code>string</code>. The HTTP URL for this repository</li> <li> <p><code>repository.visibility</code> (enum) Indicates the repository's visibility level</p> <p>The following values are valid:</p> <ul> <li><code>PRIVATE</code> The repository is visible only to those with explicit access</li> <li><code>PUBLIC</code> The repository is visible to everyone</li> <li><code>INTERNAL</code> The repository is visible only to users in the same business</li> </ul> </li> </ul>"},{"location":"github/script-attributes/#owner","title":"<code>owner</code>","text":"<p>The project owner</p> <ul> <li><code>owner.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request","title":"<code>pull_request</code>","text":"<p>Information about the Pull Request</p> <ul> <li> <p><code>pull_request.active_lock_reason</code> (optional enum) Reason that the conversation was locked</p> <p>The following values are valid:</p> <ul> <li><code>OFF_TOPIC</code> The issue or Pull Request was locked because the conversation was off-topic</li> <li><code>TOO_HEATED</code> The issue or Pull Request was locked because the conversation was too heated</li> <li><code>RESOLVED</code> The issue or Pull Request was locked because the conversation was resolved</li> <li><code>SPAM</code> The issue or Pull Request was locked because the conversation was spam</li> </ul> </li> <li> <p><code>pull_request.additions</code> ; <code>int</code>. The number of additions in this Pull Request</p> </li> <li><code>pull_request.base_ref_name</code> ; <code>string</code>. Identifies the name of the base Ref associated with the Pull Request, even if the ref has been deleted</li> <li><code>pull_request.body</code> ; <code>string</code>. The body as Markdown</li> <li><code>pull_request.can_be_rebased</code> ; <code>boolean</code>. Whether or not the Pull Request is rebaseable</li> <li><code>pull_request.changed_files</code> ; <code>int</code>. The number of changed files in this Pull Request</li> <li><code>pull_request.closed</code> ; <code>boolean</code>. <code>true</code> if the Pull Request is closed</li> <li><code>pull_request.closed_at</code> ; <code>optional time</code>. Identifies the date and time when the object was closed</li> <li><code>pull_request.created_at</code> ; <code>time</code>. Identifies the date and time when the object was created</li> <li><code>pull_request.created_via_email</code> ; <code>boolean</code>. Check if this comment was created via an email reply</li> <li><code>pull_request.deletions</code> ; <code>int</code>. The number of deletions in this Pull Request</li> <li><code>pull_request.head_ref_name</code> ; <code>string</code>. Identifies the name of the head Ref associated with the Pull Request, even if the ref has been deleted</li> <li><code>pull_request.id</code> ; <code>string</code>. The Node ID of the PullRequest object</li> <li><code>pull_request.includes_created_edit</code> ; <code>boolean</code>. Check if this comment was edited and includes an edit with the creation data</li> <li><code>pull_request.is_cross_repository</code> ; <code>boolean</code>. The head and base repositories are different</li> <li><code>pull_request.is_draft</code> ; <code>boolean</code>. Identifies if the Pull Request is a draft</li> <li><code>pull_request.is_in_merge_queue</code> ; <code>boolean</code>. Indicates whether the Pull Request is in a merge queue</li> <li><code>pull_request.is_merge_queue_enabled</code> ; <code>boolean</code>. Indicates whether the Pull Request's base ref has a merge queue enabled</li> <li><code>pull_request.last_edited_at</code> ; <code>optional time</code>. The moment the editor made the last edit</li> <li><code>pull_request.locked</code> ; <code>boolean</code>. <code>true</code> if the Pull Request is locked</li> <li><code>pull_request.maintainer_can_modify</code> ; <code>boolean</code>. Indicates whether maintainers can modify the Pull Request</li> <li> <p><code>pull_request.merge_state_status</code> (enum) Detailed information about the current Pull Request merge state status</p> <p>The following values are valid:</p> <ul> <li><code>DIRTY</code> The merge commit cannot be cleanly created</li> <li><code>UNKNOWN</code> The state cannot currently be determined</li> <li><code>BLOCKED</code> The merge is blocked</li> <li><code>BEHIND</code> The head ref is out of date</li> <li><code>UNSTABLE</code> Mergeable with non-passing commit status</li> <li><code>HAS_HOOKS</code> Mergeable with passing commit status and pre-receive hooks</li> <li><code>CLEAN</code> Mergeable and passing commit status</li> </ul> </li> <li> <p><code>pull_request.mergeable</code> (enum) Whether or not the Pull Request can be merged based on the existence of merge conflicts</p> <p>The following values are valid:</p> <ul> <li><code>MERGEABLE</code> The Pull Request can be merged</li> <li><code>CONFLICTING</code> The Pull Request cannot be merged due to merge conflicts</li> <li><code>UNKNOWN</code> The mergeability of the Pull Request is still being calculated</li> </ul> </li> <li> <p><code>pull_request.merged</code> ; <code>boolean</code>. Whether or not the Pull Request was merged</p> </li> <li><code>pull_request.merged_at</code> ; <code>optional time</code>. The date and time that the Pull Request was merged</li> <li><code>pull_request.number</code> ; <code>int</code>. Identifies the Pull Request number</li> <li><code>pull_request.permalink</code> ; <code>string</code>. The permalink to the Pull Request</li> <li><code>pull_request.published_at</code> ; <code>optional time</code>. Identifies when the comment was published at</li> <li><code>pull_request.resource_path</code> ; <code>string</code>. The HTTP path for this Pull Request</li> <li> <p><code>pull_request.review_decision</code> (enum) The current status of this Pull Request with respect to code review</p> <p>The following values are valid:</p> <ul> <li><code>CHANGES_REQUESTED</code> Changes have been requested on the Pull Request</li> <li><code>APPROVED</code> The Pull Request has received an approving review</li> <li><code>REVIEW_REQUIRED</code> A review is required before the Pull Request can be merged</li> </ul> </li> <li> <p><code>pull_request.state</code> (enum) Identifies the state of the Pull Request</p> <p>The following values are valid:</p> <ul> <li><code>OPEN</code> A Pull Request that is still open</li> <li><code>CLOSED</code> A Pull Request that has been closed without being merged</li> <li><code>MERGED</code> A Pull Request that has been closed by being merged</li> </ul> </li> <li> <p><code>pull_request.time_between_first_and_last_commit</code> ; <code>optional duration</code>. Duration between first and last commit made</p> </li> <li><code>pull_request.time_since_first_commit</code> ; <code>optional duration</code>. Duration (from 'now') since the first commit was made</li> <li><code>pull_request.time_since_last_commit</code> ; <code>optional duration</code>. Duration (from 'now') since the last commit was made</li> <li><code>pull_request.title</code> ; <code>string</code>. Identifies the Pull Request title</li> <li><code>pull_request.total_comments_count</code> ; <code>optional int</code>. Returns a count of how many comments this Pull Request has received</li> <li><code>pull_request.updated_at</code> ; <code>time</code>. Identifies the date and time when the object was last updated</li> <li><code>pull_request.url</code> ; <code>string</code>. The HTTP URL for this Pull Request</li> </ul>"},{"location":"github/script-attributes/#pull_request.files[]","title":"<code>pull_request.files[]</code>","text":"<ul> <li><code>pull_request.files[].additions</code> ; <code>int</code>. The number of additions to the file</li> <li> <p><code>pull_request.files[].change_type</code> (enum) How the file was changed in this PullRequest</p> <p>The following values are valid:</p> <ul> <li><code>ADDED</code> The file was added. Git status 'A'</li> <li><code>DELETED</code> The file was deleted. Git status 'D'</li> <li><code>RENAMED</code> The file was renamed. Git status 'R'</li> <li><code>COPIED</code> The file was copied. Git status 'C'</li> <li><code>MODIFIED</code> The file's contents were changed. Git status 'M'</li> <li><code>CHANGED</code> The file's type was changed. Git status 'T'</li> </ul> </li> <li> <p><code>pull_request.files[].deletions</code> ; <code>int</code>. The number of deletions to the file</p> </li> <li><code>pull_request.files[].path</code> ; <code>string</code>. The path of the file</li> </ul>"},{"location":"github/script-attributes/#pull_request.first_commit","title":"<code>pull_request.first_commit</code>","text":"<p>Information about the first commit made</p> <ul> <li><code>pull_request.first_commit.additions</code> ; <code>int</code>. The number of additions in this commit</li> <li><code>pull_request.first_commit.authored_by_committer</code> ; <code>boolean</code>. Check if the committer and the author match</li> <li><code>pull_request.first_commit.authored_date</code> ; <code>time</code>. The datetime when this commit was authored</li> <li><code>pull_request.first_commit.changed_files_if_available</code> ; <code>optional int</code>. The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return null. We recommend using this field instead of changedFiles</li> <li><code>pull_request.first_commit.commit_resource_path</code> ; <code>string</code>. The HTTP path for this Git object</li> <li><code>pull_request.first_commit.commit_url</code> ; <code>string</code>. The HTTP URL for this Git object</li> <li><code>pull_request.first_commit.committed_date</code> ; <code>time</code>. The datetime when this commit was committed</li> <li><code>pull_request.first_commit.committed_via_web</code> ; <code>boolean</code>. Check if committed via GitHub web UI</li> <li><code>pull_request.first_commit.deletions</code> ; <code>int</code>. The number of deletions in this commit</li> <li><code>pull_request.first_commit.message</code> ; <code>string</code>. The Git commit message</li> <li><code>pull_request.first_commit.message_body</code> ; <code>string</code>. The Git commit message body</li> <li><code>pull_request.first_commit.message_headline</code> ; <code>string</code>. The Git commit message headline</li> <li><code>pull_request.first_commit.url</code> ; <code>string</code>. The HTTP URL for this commit</li> </ul>"},{"location":"github/script-attributes/#pull_request.first_commit.author","title":"<code>pull_request.first_commit.author</code>","text":"<p>Authorship details of the commit</p> <ul> <li><code>pull_request.first_commit.author.date</code> ; <code>optional time</code>. The timestamp of the Git action (authoring or committing)</li> <li><code>pull_request.first_commit.author.email</code> ; <code>optional string</code>. The email in the Git commit</li> <li><code>pull_request.first_commit.author.name</code> ; <code>optional string</code>. The name in the Git commit</li> </ul>"},{"location":"github/script-attributes/#pull_request.first_commit.author.user","title":"<code>pull_request.first_commit.author.user</code>","text":"<p>The GitHub user corresponding to the email field. Null if no such user exists</p> <ul> <li><code>pull_request.first_commit.author.user.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request.first_commit.committer","title":"<code>pull_request.first_commit.committer</code>","text":"<p>Committer details of the commit</p> <ul> <li><code>pull_request.first_commit.committer.date</code> ; <code>optional time</code>. The timestamp of the Git action (authoring or committing)</li> <li><code>pull_request.first_commit.committer.email</code> ; <code>optional string</code>. The email in the Git commit</li> <li><code>pull_request.first_commit.committer.name</code> ; <code>optional string</code>. The name in the Git commit</li> </ul>"},{"location":"github/script-attributes/#pull_request.first_commit.committer.user","title":"<code>pull_request.first_commit.committer.user</code>","text":"<p>The GitHub user corresponding to the email field. Null if no such user exists</p> <ul> <li><code>pull_request.first_commit.committer.user.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request.last_commit","title":"<code>pull_request.last_commit</code>","text":"<p>Information about the last commit made</p> <ul> <li><code>pull_request.last_commit.additions</code> ; <code>int</code>. The number of additions in this commit</li> <li><code>pull_request.last_commit.authored_by_committer</code> ; <code>boolean</code>. Check if the committer and the author match</li> <li><code>pull_request.last_commit.authored_date</code> ; <code>time</code>. The datetime when this commit was authored</li> <li><code>pull_request.last_commit.changed_files_if_available</code> ; <code>optional int</code>. The number of changed files in this commit. If GitHub is unable to calculate the number of changed files (for example due to a timeout), this will return null. We recommend using this field instead of changedFiles</li> <li><code>pull_request.last_commit.commit_resource_path</code> ; <code>string</code>. The HTTP path for this Git object</li> <li><code>pull_request.last_commit.commit_url</code> ; <code>string</code>. The HTTP URL for this Git object</li> <li><code>pull_request.last_commit.committed_date</code> ; <code>time</code>. The datetime when this commit was committed</li> <li><code>pull_request.last_commit.committed_via_web</code> ; <code>boolean</code>. Check if committed via GitHub web UI</li> <li><code>pull_request.last_commit.deletions</code> ; <code>int</code>. The number of deletions in this commit</li> <li><code>pull_request.last_commit.message</code> ; <code>string</code>. The Git commit message</li> <li><code>pull_request.last_commit.message_body</code> ; <code>string</code>. The Git commit message body</li> <li><code>pull_request.last_commit.message_headline</code> ; <code>string</code>. The Git commit message headline</li> <li><code>pull_request.last_commit.url</code> ; <code>string</code>. The HTTP URL for this commit</li> </ul>"},{"location":"github/script-attributes/#pull_request.last_commit.author","title":"<code>pull_request.last_commit.author</code>","text":"<p>Authorship details of the commit</p> <ul> <li><code>pull_request.last_commit.author.date</code> ; <code>optional time</code>. The timestamp of the Git action (authoring or committing)</li> <li><code>pull_request.last_commit.author.email</code> ; <code>optional string</code>. The email in the Git commit</li> <li><code>pull_request.last_commit.author.name</code> ; <code>optional string</code>. The name in the Git commit</li> </ul>"},{"location":"github/script-attributes/#pull_request.last_commit.author.user","title":"<code>pull_request.last_commit.author.user</code>","text":"<p>The GitHub user corresponding to the email field. Null if no such user exists</p> <ul> <li><code>pull_request.last_commit.author.user.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request.last_commit.committer","title":"<code>pull_request.last_commit.committer</code>","text":"<p>Committer details of the commit</p> <ul> <li><code>pull_request.last_commit.committer.date</code> ; <code>optional time</code>. The timestamp of the Git action (authoring or committing)</li> <li><code>pull_request.last_commit.committer.email</code> ; <code>optional string</code>. The email in the Git commit</li> <li><code>pull_request.last_commit.committer.name</code> ; <code>optional string</code>. The name in the Git commit</li> </ul>"},{"location":"github/script-attributes/#pull_request.last_commit.committer.user","title":"<code>pull_request.last_commit.committer.user</code>","text":"<p>The GitHub user corresponding to the email field. Null if no such user exists</p> <ul> <li><code>pull_request.last_commit.committer.user.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request.merged_by","title":"<code>pull_request.merged_by</code>","text":"<p>The actor who merged the Pull Request</p> <ul> <li><code>pull_request.merged_by.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request.author","title":"<code>pull_request.author</code>","text":"<p>The actor who authored the comment</p> <ul> <li><code>pull_request.author.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#pull_request.labels[]","title":"<code>pull_request.labels[]</code>","text":"<p>Labels available on this project</p> <ul> <li><code>pull_request.labels[].color</code> ; <code>string</code>. Identifies the label color</li> <li><code>pull_request.labels[].created_at</code> ; <code>optional time</code>. Identifies the date and time when the label was created</li> <li><code>pull_request.labels[].description</code> ; <code>optional string</code>. A brief description of this label</li> <li><code>pull_request.labels[].id</code> ; <code>string</code>. The Node ID of the Label object</li> <li><code>pull_request.labels[].is_default</code> ; <code>boolean</code>. Indicates whether or not this is a default label</li> <li><code>pull_request.labels[].name</code> ; <code>string</code>. Identifies the label name</li> <li><code>pull_request.labels[].updated_at</code> ; <code>time</code>. Identifies the date and time when the label was last updated</li> </ul>"},{"location":"github/script-attributes/#viewer","title":"<code>viewer</code>","text":"<p>Get information about current user</p> <ul> <li><code>viewer.login</code> ; <code>string</code>. The username used to login</li> </ul>"},{"location":"github/script-attributes/#webhook_event","title":"<code>webhook_event</code>","text":"<p><code>webhook_event</code> attribute is only available in <code>server</code> mode</p> <p>You have access to the raw webhook event payload via <code>webhook_event.*</code> attributes (not listed below) in Expr script fields when using <code>server</code> mode.</p> <p>See the GitLab Webhook Events documentation for available fields.</p> <p>The attributes are named exactly as documented in the GitLab documentation.</p> <ul> <li><code>Comments</code> - A comment is made or edited on an issue or merge request.</li> <li><code>Merge request events</code> - A merge request is created, updated, or merged.</li> </ul>"},{"location":"github/script-functions/","title":"Script Functions","text":"<p>The Expr Language Definition is a great resource to learn more about the language</p>"},{"location":"github/script-functions/#pull_request","title":"pull_request","text":""},{"location":"github/script-functions/#pull_request.state_is","title":"<code>pull_request.state_is(string...) -&gt; boolean</code>","text":"<p>Check if the <code>pull_request</code> state is any of the provided states</p> <p>Valid options:</p> <ul> <li><code>CLOSED</code> - In closed state</li> <li><code>MERGED</code> - Pull Request has been merged</li> <li><code>OPEN</code> - Opened Pull Request</li> </ul> <pre><code>pull_request.state_is(\"MERGED\")\npull_request.state_is(\"CLOSED\", \"MERGED\")\n</code></pre>"},{"location":"github/script-functions/#pull_request.modified_files","title":"<code>pull_request.modified_files(string...) -&gt; boolean</code>","text":"<p>Returns wether any of the provided files patterns have been modified in the Pull Request.</p> <p>The file patterns use the <code>.gitignore</code> format.</p> <pre><code>pull_request.modified_files(\"*.go\", \"docs/\") == true\n</code></pre>"},{"location":"github/script-functions/#pull_request.modified_files_list","title":"<code>pull_request.modified_files_list(string...) -&gt; []string</code>","text":"<p>Returns an array of files matching the provided (optional) pattern thas has been modified in the Pull Request.</p> <p>The file patterns use the <code>.gitignore</code> format.</p> <pre><code>pull_request.modified_files_list(\"*.go\", \"docs/\") == [\"example/file.go\", \"docs/index.md\"]\n</code></pre>"},{"location":"github/script-functions/#pull_request.has_label","title":"<code>pull_request.has_label(string) -&gt; boolean</code>","text":"<p>Returns wether any of the provided label exist on the Pull Request.</p> <pre><code>pull_request.labels = [\"hello\"]\npull_request.has_label(\"hello\") == true\npull_request.has_label(\"world\") == false\n</code></pre>"},{"location":"github/script-functions/#pull_request.has_no_label","title":"<code>pull_request.has_no_label(string) -&gt; boolean</code>","text":"<p>Returns wether the Pull Request has the provided label or not.</p> <pre><code>pull_request.labels = [\"hello\"]\npull_request.has_no_label(\"hello\") == false\npull_request.has_no_label(\"world\") == true\n</code></pre>"},{"location":"github/script-functions/#global","title":"Global","text":""},{"location":"github/script-functions/#duration","title":"<code>duration(string) -&gt; duration</code>","text":"<p>Returns the <code>time.Duration</code> value of the given string str.</p> <p>Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\", \"d\" and \"w\".</p> <pre><code>duration(\"1h\").Seconds() == 3600\n</code></pre>"},{"location":"github/script-functions/#uniq","title":"<code>uniq([]string) -&gt; []string</code>","text":"<p>Returns a new array where all duplicate values has been removed.</p> <pre><code>([\"hello\", \"world\", \"world\"] | uniq) == [\"hello\", \"world\"]\n</code></pre>"},{"location":"github/script-functions/#filepath_dir","title":"<code>filepath_dir</code>","text":"<p><code>filepath_dir</code> returns all but the last element of path, typically the path's directory. After dropping the final element,</p> <p>Dir calls Clean on the path and trailing slashes are removed.</p> <p>If the path is empty, <code>filepath_dir</code> returns \".\". If the path consists entirely of separators, <code>filepath_dir</code> returns a single separator.</p> <p>The returned path does not end in a separator unless it is the root directory.</p> <pre><code>filepath_dir(\"example/directory/file.go\") == \"example/directory\"\n</code></pre>"},{"location":"github/script-functions/#limit_path_depth_to","title":"<code>limit_path_depth_to</code>","text":"<p><code>limit_path_depth_to</code> takes a path structure, and limits it to the configured maximum depth. Particularly useful when using <code>generated</code> labels from a directory structure, and want to to have a label naming scheme that only uses path of the path.</p> <pre><code>limit_path_depth_to(\"path1/path2/path3/path4\", 2), == \"path1/path2\"\nlimit_path_depth_to(\"path1/path2\", 3), == \"path1/path2\"\n</code></pre>"},{"location":"github/setup/","title":"Setup","text":"<p>TODO</p>"},{"location":"gitlab/commands/","title":"Commands","text":""},{"location":"gitlab/commands/#scm-engine","title":"<code>scm-engine</code>","text":"<pre><code>NAME:\n   scm-engine - GitHub/GitLab automation\n\nUSAGE:\n   scm-engine [global options] command [command options]\n\nVERSION:\n   dev (date: unknown; commit: unknown)\n\nAUTHOR:\n   Christian Winther &lt;scm-engine@jippi.dev&gt;\n\nCOMMANDS:\n   gitlab      GitLab related commands\n   github      GitHub related commands\n   jsonschema  \n   help, h     Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n\nCOPYRIGHT:\n   Christian Winther\n</code></pre>"},{"location":"gitlab/commands/#scm-engine-gitlab","title":"<code>scm-engine gitlab</code>","text":"<pre><code>NAME:\n   scm-engine gitlab - GitLab related commands\n\nUSAGE:\n   scm-engine gitlab command [command options]\n\nCOMMANDS:\n   evaluate  Evaluate a Merge Request\n   help, h   Shows a list of commands or help for one command\n\nOPTIONS:\n   --api-token value  GitLab API token [$SCM_ENGINE_TOKEN]\n   --base-url value   Base URL for the SCM instance (default: \"https://gitlab.com/\") [$SCM_ENGINE_BASE_URL, $CI_SERVER_URL]\n   --help, -h         show help\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n</code></pre>"},{"location":"gitlab/commands/#scm-engine-gitlab-evaluate","title":"<code>scm-engine gitlab evaluate</code>","text":"<pre><code>NAME:\n   scm-engine gitlab evaluate - Evaluate a Merge Request\n\nUSAGE:\n   scm-engine gitlab evaluate [command options]  [mr_id, mr_id, ...]\n\nOPTIONS:\n   --update-pipeline            Update the CI pipeline status with progress (default: true) [$SCM_ENGINE_UPDATE_PIPELINE]\n   --update-pipeline-url value  (Optional) URL to where logs can be found for the pipeline [$SCM_ENGINE_UPDATE_PIPELINE_URL]\n   --project value              GitLab project (example: 'gitlab-org/gitlab') [$GITLAB_PROJECT, $CI_PROJECT_PATH]\n   --id value                   The Merge Request ID to process, if not provided as a CLI flag [$CI_MERGE_REQUEST_IID]\n   --commit value               The git commit sha [$CI_COMMIT_SHA]\n   --help, -h                   show help\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n</code></pre>"},{"location":"gitlab/commands/#scm-engine-gitlab-server","title":"<code>scm-engine gitlab server</code>","text":"<p>Point your GitLab webhook at the <code>/gitlab</code> endpoint.</p> <p>Support the following events, and they will both trigger an Merge Request <code>evaluation</code></p> <ul> <li><code>Comments</code> - A comment is made or edited on an issue or merge request.</li> <li><code>Merge request events</code> - A merge request is created, updated, or merged.</li> </ul> <p>Tip</p> <p>You have access to the raw webhook event payload via <code>webhook_event.*</code> fields in Expr script fields when using <code>server</code> mode. See the GitLab Webhook Events documentation for available fields.</p> <pre><code>NAME:\n   scm-engine gitlab server - Start HTTP server for webhook event driven usage\n\nUSAGE:\n   scm-engine gitlab server [command options]\n\nOPTIONS:\n   --webhook-secret value                                                                           Used to validate received payloads. Sent with the request in the X-Gitlab-Token HTTP header [$SCM_ENGINE_WEBHOOK_SECRET]\n   --listen-host value                                                                              IP that the HTTP server should listen on (default: \"0.0.0.0\") [$SCM_ENGINE_LISTEN_ADDR]\n   --listen-port value                                                                              Port that the HTTP server should listen on (default: 3000) [$SCM_ENGINE_LISTEN_PORT, $PORT]\n   --timeout value                                                                                  Timeout for webhook requests (default: 5s) [$SCM_ENGINE_TIMEOUT]\n   --update-pipeline                                                                                Update the CI pipeline status with progress (default: true) [$SCM_ENGINE_UPDATE_PIPELINE]\n   --update-pipeline-url value                                                                      (Optional) URL to where logs can be found for the pipeline [$SCM_ENGINE_UPDATE_PIPELINE_URL]\n   --periodic-evaluation-interval value                                                             (Optional) Frequency of which to evaluate all Merge Requests regardless of user activity (default: 0s) [$SCM_ENGINE_PERIODIC_EVALUATION_INTERVAL]\n   --periodic-evaluation-ignore-mr-labels value [ --periodic-evaluation-ignore-mr-labels value ]    (Optional) Ignore MR with these labels [$SCM_ENGINE_PERIODIC_EVALUATION_IGNORE_MR_WITH_LABELS]\n   --periodic-evaluation-require-mr-labels value [ --periodic-evaluation-require-mr-labels value ]  (Optional) Only process MR with these labels [$SCM_ENGINE_PERIODIC_EVALUATION_REQUIRE_MR_WITH_LABELS]\n   --periodic-evaluation-project-topics value [ --periodic-evaluation-project-topics value ]        (Optional) Only evaluate projects with these topics [$SCM_ENGINE_PERIODIC_EVALUATION_REQUIRE_PROJECT_TOPICS]\n   --periodic-evaluation-only-project-membership                                                    (Optional) Only evaluate projects with membership (default: true) [$SCM_ENGINE_PERIODIC_EVALUATION_ONLY_PROJECTS_WITH_MEMBERSHIP]\n   --help, -h                                                                                       show help\n\nGLOBAL OPTIONS:\n   --config value  Path to the scm-engine config file (default: \".scm-engine.yml\") [$SCM_ENGINE_CONFIG_FILE]\n   --dry-run       Dry run, don't actually _do_ actions, just print them (default: false) [$SCM_ENGINE_DRY_RUN]\n   --help, -h      show help\n   --version, -v   print the version\n</code></pre>"},{"location":"gitlab/examples/","title":"Examples","text":"<p>Note</p> <p>A quick demo of what SCM Engine can do.</p> <p>The <code>script</code> field is a expr-lang expression, a safe, fast, and intuitive expression evaluator.</p>"},{"location":"gitlab/examples/#close-merge-requests-without-recent-activity","title":"Close Merge Requests without recent activity","text":"<p>This example will close a Merge Request if no activity has happened for 28 days.</p> <p>The script will warn at 21 days mark that the Merge Request will be closed, with instructions on how to prevent it.</p> <pre><code>label:\n  - name: \"stale\" # (1)!\n    color: $red # (11)!\n    script: |1 # (2)!\n           merge_request.state_is(\"opened\")\n        &amp;&amp; merge_request.has_no_label(\"do-not-close\")\n        &amp;&amp; merge_request.has_no_user_activity_within(\"21d\")\n\nactions:\n  - name: \"warn\" #(5)!\n    if: |1 # (3)!\n           merge_request.state_is(\"opened\")\n        &amp;&amp; merge_request.has_no_label(\"stale\")\n        &amp;&amp; merge_request.has_no_label(\"do-not-close\")\n        &amp;&amp; merge_request.has_no_user_activity_within(\"21d\")\n    then:\n      - action: add_label # (6)!\n        name: stale\n\n      - action: comment # (9)!\n        message: |\n          :wave: Hello!\n\n          This MR has not seen any commit activity for 21 days.\n          We will automatically close the MR after 28 days.\n\n          To disable this behavior, add the `do-not-close` label to the\n          MR in the right menu or add comment with `/label ~\"do-not-close\"`\n\n  - name: \"close\" # (10)!\n    if: |1 # (4)!\n           merge_request.state_is(\"opened\")\n        &amp;&amp; merge_request.has_label(\"stale\")\n        &amp;&amp; merge_request.has_no_label(\"do-not-close\")\n        &amp;&amp; merge_request.has_no_activity_within(\"7d\")\n    then:\n      - action: close # (8)!\n\n      - action: comment # (7)!\n        message: |\n          :wave: Hello!\n\n          This MR has not seen any commit activity for 28 days.\n          To keep our project clean, we will close the Merge request now.\n\n          To disable this behavior, add the `do-not-close` label to the\n          MR in the right menu or add comment with `/label ~\"do-not-close\"`\n</code></pre> <ol> <li> <p>Add the label <code>stale</code> to MRs without activity in the last 21 days.</p> <p>The <code>stale</code> label will automatically be removed if any activity happens on the MR.</p> </li> <li> <p>Syntax highlighted <code>script</code></p> <pre><code>   merge_request.state_is(\"opened\")\n&amp;&amp; merge_request.has_no_label(\"do-not-close\")\n&amp;&amp; merge_request.has_no_user_activity_within(\"21d\")\n</code></pre> </li> <li> <p>Syntax highlighted <code>if</code></p> <pre><code>   merge_request.state_is(\"opened\")\n&amp;&amp; merge_request.has_no_label(\"stale\")\n&amp;&amp; merge_request.has_no_label(\"do-not-close\")\n&amp;&amp; merge_request.has_no_user_activity_within(\"21d\")\n</code></pre> </li> <li> <p>Syntax highlighted <code>if</code></p> <pre><code>   merge_request.state_is(\"opened\")\n&amp;&amp; merge_request.has_label(\"stale\")\n&amp;&amp; merge_request.has_no_label(\"do-not-close\")\n&amp;&amp; merge_request.has_no_activity_within(\"7d\")\n</code></pre> </li> <li> <p>Send \"warning\" about the MR being inactive</p> </li> <li>Add the <code>stale</code> label to the MR (if it doesn't exists)</li> <li>Add a comment to the MR</li> <li>Close the MR</li> <li>Add a comment to the MR</li> <li> <p>Close the MR if no activity has happened after 7 days.</p> <p>Why 7 days?</p> <p>The <code>merge_request.updated_at</code> updated when we commented and added the <code>stale</code> label at the 21 day mark.</p> <p>So instead we count 7 days from that point in time for the <code>close</code> step.</p> </li> <li> <p>You can use Twitter Bootstrap color variables instead of HEX values.</p> </li> </ol>"},{"location":"gitlab/examples/#add-label-if-a-file-extension-is-modified","title":"Add label if a file extension is modified","text":"ConfigScript with highlight <pre><code>label:\n  - name: lang/go\n    color: $indigo\n    script: merge_request.modified_files(\"*.go\")\n\n  - name: lang/markdown\n    color: $indigo\n    script: merge_request.modified_files(\"*.md\")\n\n  - name: type/documentation\n    color: $green\n    script: merge_request.modified_files(\"docs/\")\n\n  - name: go::tests::missing\n    color: $red\n    priority: 999\n    script: |1\n          merge_request.modified_files(\"*.go\")\n      &amp;&amp; NOT merge_request.modified_files(\"*_test.go\")\n\n  - name: go::tests::ok\n    color: $green\n    priority: 999\n    script: |1\n          merge_request.modified_files(\"*.go\")\n      &amp;&amp; merge_request.modified_files(\"*_test.go\")\n</code></pre> <pre><code>merge_request.modified_files(\"*.go\")\n</code></pre>"},{"location":"gitlab/examples/#generate-labels-via-script","title":"Generate labels via script","text":"ConfigScript with highlight <pre><code>label:\n  # Generate list of labels via script\n  - strategy: generate\n    # With a description (optional)\n    description: \"Modified this service directory\"\n    # With the color $pink\n    color: \"$pink\"\n    # From this script, returning a list of labels\n    script: &gt;\n      /* Generate a list of files changed in the MR inside pkg/service/ */\n      merge_request.modified_files_list(\"pkg/service/\")\n\n      /* Remove the filename from the path\n        pkg/service/example/file.go =&gt; pkg/service/example */\n      | map({ filepath_dir(#) })\n\n      /* Remove the prefix \"pkg/\" from the path\n         pkg/service/example =&gt; service/example */\n      | map({ trimPrefix(#, \"pkg/\") })\n\n      /* Remove duplicate values from the output */\n      | uniq()\n</code></pre> <pre><code>/* Generate a list of files changed in the MR inside pkg/service/ */\nmerge_request.modified_files_list(\"pkg/service/\")\n\n/* Remove the filename from the path\n *\n * pkg/service/example/file.go =&gt; pkg/service/example\n */\n| map({ filepath_dir(#) })\n\n/* Remove the prefix \"pkg/\" from the path\n *\n * pkg/service/example =&gt; service/example\n */\n| map({ trimPrefix(#, \"pkg/\") })\n\n/* Remove duplicate values from the output */\n| uniq()\n</code></pre>"},{"location":"gitlab/script-attributes/","title":"Script Attributes","text":"<p>The Expr Language Definition is a great resource to learn more about the language</p> <p>Note</p> <p>Missing an attribute? The <code>schema/gitlab.schema.graphqls</code> file are what is used to query GitLab, adding the missing <code>field</code> to the right <code>type</code> should make it accessible. Please open an issue or Pull Request if something is missing.</p> <p>The following attributes are available in <code>script</code> fields.</p> <p>They can be accessed exactly as shown in this list.</p>"},{"location":"gitlab/script-attributes/#project","title":"<code>project</code>","text":"<p>The project the Merge Request belongs to</p> <ul> <li><code>project.archived</code> ; <code>boolean</code>. Indicates the archived status of the project</li> <li><code>project.created_at</code> ; <code>time</code>. Timestamp of the project creation</li> <li><code>project.description</code> ; <code>string</code>. Short description of the project</li> <li><code>project.full_path</code> ; <code>string</code>. Full path of the project</li> <li><code>project.id</code> ; <code>string</code>. ID of the project</li> <li><code>project.issues_enabled</code> ; <code>boolean</code>. Indicates if Issues are enabled for the current user</li> <li><code>project.last_activity_at</code> ; <code>time</code>. Timestamp of the project last activity</li> <li><code>project.name</code> ; <code>string</code>. Name of the project (without namespace)</li> <li><code>project.name_with_namespace</code> ; <code>string</code>. Full name of the project with its namespace</li> <li><code>project.path</code> ; <code>string</code>. Path of the project</li> <li><code>project.topics</code> ; <code>[]string</code>. List of project topics</li> <li><code>project.visibility</code> ; <code>string</code>. Visibility of the project</li> </ul>"},{"location":"gitlab/script-attributes/#project.labels[]","title":"<code>project.labels[]</code>","text":"<p>Labels available on this project</p> <ul> <li><code>project.labels[].color</code> ; <code>string</code>. Background color of the label</li> <li><code>project.labels[].description</code> ; <code>string</code>. Description of the label (Markdown rendered as HTML for caching)</li> <li><code>project.labels[].id</code> ; <code>string</code>. Label ID</li> <li><code>project.labels[].title</code> ; <code>string</code>. Content of the label</li> </ul>"},{"location":"gitlab/script-attributes/#group","title":"<code>group</code>","text":"<p>The project group</p> <ul> <li><code>group.description</code> ; <code>string</code>. Description of the namespace</li> <li><code>group.emails_disabled</code> ; <code>optional boolean</code>. Indicates if a group has email notifications disabled</li> <li><code>group.full_name</code> ; <code>string</code>. Full name of the namespace</li> <li><code>group.full_path</code> ; <code>string</code>. Full path of the namespace</li> <li><code>group.id</code> ; <code>string</code>. ID of the namespace</li> <li><code>group.mentions_disabled</code> ; <code>optional boolean</code>. Indicates if a group is disabled from getting mentioned</li> <li><code>group.name</code> ; <code>string</code>. Name of the namespace</li> <li><code>group.path</code> ; <code>string</code>. Path of the namespace</li> <li><code>group.visibility</code> ; <code>optional string</code>. Visibility of the namespace</li> <li><code>group.web_url</code> ; <code>string</code>. Web URL of the group</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request","title":"<code>merge_request</code>","text":"<p>Information about the Merge Request</p> <ul> <li><code>merge_request.approvals_left</code> ; <code>optional int</code>. Number of approvals left</li> <li><code>merge_request.approvals_required</code> ; <code>optional int</code>. Number of approvals required</li> <li><code>merge_request.approved</code> ; <code>boolean</code>. Indicates if the merge request has all the required approvals</li> <li><code>merge_request.auto_merge_enabled</code> ; <code>boolean</code>. Indicates if auto merge is enabled for the merge request</li> <li><code>merge_request.auto_merge_strategy</code> ; <code>optional string</code>. Selected auto merge strategy</li> <li><code>merge_request.commit_count</code> ; <code>optional int</code>. Number of commits in the merge request</li> <li><code>merge_request.conflicts</code> ; <code>boolean</code>. Indicates if the merge request has conflicts</li> <li><code>merge_request.created_at</code> ; <code>time</code>. Timestamp of when the merge request was created</li> <li><code>merge_request.description</code> ; <code>optional string</code>. Description of the merge request (Markdown rendered as HTML for caching)</li> <li> <p><code>merge_request.detailed_merge_status</code> (optional enum) Detailed merge status of the merge request</p> <p>The following values are valid:</p> <ul> <li><code>UNCHECKED</code> Merge status has not been checked</li> <li><code>CHECKING</code> Currently checking for mergeability</li> <li><code>MERGEABLE</code> Branch can be merged</li> <li><code>COMMITS_STATUS</code> Source branch exists and contains commits</li> <li><code>CI_MUST_PASS</code> Pipeline must succeed before merging</li> <li><code>CI_STILL_RUNNING</code> Pipeline is still running</li> <li><code>DISCUSSIONS_NOT_RESOLVED</code> Discussions must be resolved before merging</li> <li><code>DRAFT_STATUS</code> Merge request must not be draft before merging</li> <li><code>NOT_OPEN</code> Merge request must be open before merging</li> <li><code>NOT_APPROVED</code> Merge request must be approved before merging</li> <li><code>BLOCKED_STATUS</code> Merge request dependencies must be merged</li> <li><code>EXTERNAL_STATUS_CHECKS</code> Status checks must pass</li> <li><code>PREPARING</code> Merge request diff is being created</li> <li><code>JIRA_ASSOCIATION</code> Either the title or description must reference a Jira issue</li> <li><code>CONFLICT</code> There are conflicts between the source and target branches</li> <li><code>NEED_REBASE</code> Merge request needs to be rebased</li> <li><code>REQUESTED_CHANGES</code> Indicates a reviewer has requested change</li> </ul> </li> <li> <p><code>merge_request.discussion_locked</code> ; <code>boolean</code>. Indicates if comments on the merge request are locked to members only</p> </li> <li><code>merge_request.diverged_from_target_branch</code> ; <code>boolean</code>. Indicates if the source branch is behind the target branch</li> <li><code>merge_request.downvotes</code> ; <code>int</code>. Number of downvotes for the merge request</li> <li><code>merge_request.draft</code> ; <code>boolean</code>. Indicates if the merge request is a draft</li> <li><code>merge_request.force_remove_source_branch</code> ; <code>optional boolean</code>. Indicates if the project settings will lead to source branch deletion after merge</li> <li><code>merge_request.id</code> ; <code>string</code>. ID of the merge request</li> <li><code>merge_request.iid</code> ; <code>string</code>. Internal ID of the merge request</li> <li> <p><code>merge_request.merge_status_enum</code> (optional enum) Merge status of the merge request</p> <p>The following values are valid:</p> <ul> <li><code>UNCHECKED</code> Merge status has not been checked</li> <li><code>CHECKING</code> Currently checking for mergeability</li> <li><code>CAN_BE_MERGED</code> There are no conflicts between the source and target branches</li> <li><code>CANNOT_BE_MERGED</code> There are conflicts between the source and target branches</li> <li><code>CANNOT_BE_MERGED_RECHECK</code> Currently unchecked. The previous state was CANNOT_BE_MERGED</li> </ul> </li> <li> <p><code>merge_request.merge_when_pipeline_succeeds</code> ; <code>optional boolean</code>. Indicates if the merge has been set to auto-merge</p> </li> <li><code>merge_request.mergeable</code> ; <code>boolean</code>. Indicates if the merge request is mergeable</li> <li><code>merge_request.mergeable_discussions_state</code> ; <code>optional boolean</code>. Indicates if all discussions in the merge request have been resolved, allowing the merge request to be merged</li> <li><code>merge_request.merged_at</code> ; <code>optional time</code>. Timestamp of when the merge request was merged, null if not merged</li> <li><code>merge_request.prepared_at</code> ; <code>optional time</code>. Timestamp of when the merge request was prepared</li> <li><code>merge_request.should_be_rebased</code> ; <code>boolean</code>. Indicates if the merge request will be rebased</li> <li><code>merge_request.should_remove_source_branch</code> ; <code>optional boolean</code>. Indicates if the source branch of the merge request will be deleted after merge</li> <li><code>merge_request.source_branch</code> ; <code>string</code>. Source branch of the merge request</li> <li><code>merge_request.source_branch_exists</code> ; <code>boolean</code>. Indicates if the source branch of the merge request exists</li> <li><code>merge_request.source_branch_protected</code> ; <code>boolean</code>. Indicates if the source branch is protected</li> <li><code>merge_request.squash</code> ; <code>boolean</code>. Indicates if the merge request is set to be squashed when merged. Project settings may override this value. Use squash_on_merge instead to take project squash options into account</li> <li><code>merge_request.squash_on_merge</code> ; <code>boolean</code>. Indicates if the merge request will be squashed when merged</li> <li><code>merge_request.state</code> ; <code>string</code>. State of the merge request</li> <li><code>merge_request.target_branch</code> ; <code>string</code>. Target branch of the merge request</li> <li><code>merge_request.target_branch_exists</code> ; <code>boolean</code>. Indicates if the target branch of the merge request exists</li> <li><code>merge_request.time_between_first_and_last_commit</code> ; <code>optional duration</code>. Duration between first and last commit made</li> <li><code>merge_request.time_since_first_commit</code> ; <code>optional duration</code>. Duration (from 'now') since the first commit was made</li> <li><code>merge_request.time_since_last_commit</code> ; <code>optional duration</code>. Duration (from 'now') since the last commit was made</li> <li><code>merge_request.title</code> ; <code>string</code>. Title of the merge request</li> <li><code>merge_request.updated_at</code> ; <code>time</code>. Timestamp of when the merge request was last updated</li> <li><code>merge_request.upvotes</code> ; <code>int</code>. Number of upvotes for the merge request.</li> <li><code>merge_request.user_discussions_count</code> ; <code>optional int</code>. Number of user discussions in the merge request</li> <li><code>merge_request.user_notes_count</code> ; <code>optional int</code>. User notes count of the merge request</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.notes[]","title":"<code>merge_request.notes[]</code>","text":"<p>All notes on this MR</p> <ul> <li><code>merge_request.notes[].body</code> ; <code>string</code>. Content of the note</li> <li><code>merge_request.notes[].created_at</code> ; <code>time</code>. Timestamp of the note creation</li> <li><code>merge_request.notes[].updated_at</code> ; <code>time</code>. Timestamp of the note\u2019s last activity</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.notes[].author","title":"<code>merge_request.notes[].author</code>","text":"<p>User who wrote the note</p> <ul> <li><code>merge_request.notes[].author.bot</code> ; <code>boolean</code>. Indicates if the user is a bot</li> <li><code>merge_request.notes[].author.public_email</code> ; <code>optional string</code>. User\u2019s public email</li> <li> <p><code>merge_request.notes[].author.state</code> (enum) State of the user</p> <p>The following values are valid:</p> <ul> <li><code>active</code> User is active and can use the system</li> <li><code>blocked</code> User has been blocked by an administrator and cannot use the system</li> <li><code>deactivated</code> User is no longer active and cannot use the system</li> <li><code>banned</code> User is blocked, and their contributions are hidden</li> <li><code>ldap_blocked</code> User has been blocked by the system</li> <li><code>blocked_pending_approval</code> User is blocked and pending approval</li> </ul> </li> <li> <p><code>merge_request.notes[].author.username</code> ; <code>string</code>. Username of the user. Unique within this instance of GitLab</p> </li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.first_commit","title":"<code>merge_request.first_commit</code>","text":"<p>Information about the first commit made</p> <ul> <li><code>merge_request.first_commit.author_email</code> ; <code>optional string</code>. Commit author\u2019s email</li> <li><code>merge_request.first_commit.author_name</code> ; <code>optional string</code>. Commit authors name</li> <li><code>merge_request.first_commit.authored_date</code> ; <code>optional time</code>. Timestamp of when the commit was authored</li> <li><code>merge_request.first_commit.committed_date</code> ; <code>optional time</code>. Timestamp of when the commit was committed</li> <li><code>merge_request.first_commit.committer_email</code> ; <code>optional string</code>. Email of the committer</li> <li><code>merge_request.first_commit.committer_name</code> ; <code>optional string</code>. Name of the committer</li> <li><code>merge_request.first_commit.description</code> ; <code>optional string</code>. Description of the commit message</li> <li><code>merge_request.first_commit.full_title</code> ; <code>optional string</code>. Full title of the commit message</li> <li><code>merge_request.first_commit.id</code> ; <code>optional string</code>. ID (global ID) of the commit</li> <li><code>merge_request.first_commit.message</code> ; <code>optional string</code>. Raw commit message</li> <li><code>merge_request.first_commit.sha</code> ; <code>string</code>. SHA1 ID of the commit</li> <li><code>merge_request.first_commit.short_id</code> ; <code>string</code>. Short SHA1 ID of the commit</li> <li><code>merge_request.first_commit.title</code> ; <code>optional string</code>. Title of the commit message</li> <li><code>merge_request.first_commit.web_url</code> ; <code>string</code>. Web URL of the commit</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.first_commit.author","title":"<code>merge_request.first_commit.author</code>","text":"<p>Author of the commit</p> <ul> <li><code>merge_request.first_commit.author.bot</code> ; <code>boolean</code>. Indicates if the user is a bot</li> <li><code>merge_request.first_commit.author.public_email</code> ; <code>optional string</code>. User\u2019s public email</li> <li> <p><code>merge_request.first_commit.author.state</code> (enum) State of the user</p> <p>The following values are valid:</p> <ul> <li><code>active</code> User is active and can use the system</li> <li><code>blocked</code> User has been blocked by an administrator and cannot use the system</li> <li><code>deactivated</code> User is no longer active and cannot use the system</li> <li><code>banned</code> User is blocked, and their contributions are hidden</li> <li><code>ldap_blocked</code> User has been blocked by the system</li> <li><code>blocked_pending_approval</code> User is blocked and pending approval</li> </ul> </li> <li> <p><code>merge_request.first_commit.author.username</code> ; <code>string</code>. Username of the user. Unique within this instance of GitLab</p> </li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.last_commit","title":"<code>merge_request.last_commit</code>","text":"<p>Information about the last commit made</p> <ul> <li><code>merge_request.last_commit.author_email</code> ; <code>optional string</code>. Commit author\u2019s email</li> <li><code>merge_request.last_commit.author_name</code> ; <code>optional string</code>. Commit authors name</li> <li><code>merge_request.last_commit.authored_date</code> ; <code>optional time</code>. Timestamp of when the commit was authored</li> <li><code>merge_request.last_commit.committed_date</code> ; <code>optional time</code>. Timestamp of when the commit was committed</li> <li><code>merge_request.last_commit.committer_email</code> ; <code>optional string</code>. Email of the committer</li> <li><code>merge_request.last_commit.committer_name</code> ; <code>optional string</code>. Name of the committer</li> <li><code>merge_request.last_commit.description</code> ; <code>optional string</code>. Description of the commit message</li> <li><code>merge_request.last_commit.full_title</code> ; <code>optional string</code>. Full title of the commit message</li> <li><code>merge_request.last_commit.id</code> ; <code>optional string</code>. ID (global ID) of the commit</li> <li><code>merge_request.last_commit.message</code> ; <code>optional string</code>. Raw commit message</li> <li><code>merge_request.last_commit.sha</code> ; <code>string</code>. SHA1 ID of the commit</li> <li><code>merge_request.last_commit.short_id</code> ; <code>string</code>. Short SHA1 ID of the commit</li> <li><code>merge_request.last_commit.title</code> ; <code>optional string</code>. Title of the commit message</li> <li><code>merge_request.last_commit.web_url</code> ; <code>string</code>. Web URL of the commit</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.last_commit.author","title":"<code>merge_request.last_commit.author</code>","text":"<p>Author of the commit</p> <ul> <li><code>merge_request.last_commit.author.bot</code> ; <code>boolean</code>. Indicates if the user is a bot</li> <li><code>merge_request.last_commit.author.public_email</code> ; <code>optional string</code>. User\u2019s public email</li> <li> <p><code>merge_request.last_commit.author.state</code> (enum) State of the user</p> <p>The following values are valid:</p> <ul> <li><code>active</code> User is active and can use the system</li> <li><code>blocked</code> User has been blocked by an administrator and cannot use the system</li> <li><code>deactivated</code> User is no longer active and cannot use the system</li> <li><code>banned</code> User is blocked, and their contributions are hidden</li> <li><code>ldap_blocked</code> User has been blocked by the system</li> <li><code>blocked_pending_approval</code> User is blocked and pending approval</li> </ul> </li> <li> <p><code>merge_request.last_commit.author.username</code> ; <code>string</code>. Username of the user. Unique within this instance of GitLab</p> </li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.labels[]","title":"<code>merge_request.labels[]</code>","text":"<p>Labels available on this merge request</p> <ul> <li><code>merge_request.labels[].color</code> ; <code>string</code>. Background color of the label</li> <li><code>merge_request.labels[].description</code> ; <code>string</code>. Description of the label (Markdown rendered as HTML for caching)</li> <li><code>merge_request.labels[].id</code> ; <code>string</code>. Label ID</li> <li><code>merge_request.labels[].title</code> ; <code>string</code>. Content of the label</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.diff_stats[]","title":"<code>merge_request.diff_stats[]</code>","text":"<p>Changes to a single file</p> <ul> <li><code>merge_request.diff_stats[].additions</code> ; <code>int</code>. Number of lines added to this file</li> <li><code>merge_request.diff_stats[].deletions</code> ; <code>int</code>. Number of lines deleted from this file</li> <li><code>merge_request.diff_stats[].path</code> ; <code>string</code>. File path, relative to repository root</li> </ul>"},{"location":"gitlab/script-attributes/#merge_request.author","title":"<code>merge_request.author</code>","text":"<p>User who created this merge request</p> <ul> <li><code>merge_request.author.bot</code> ; <code>boolean</code>. Indicates if the user is a bot</li> <li><code>merge_request.author.public_email</code> ; <code>optional string</code>. User\u2019s public email</li> <li> <p><code>merge_request.author.state</code> (enum) State of the user</p> <p>The following values are valid:</p> <ul> <li><code>active</code> User is active and can use the system</li> <li><code>blocked</code> User has been blocked by an administrator and cannot use the system</li> <li><code>deactivated</code> User is no longer active and cannot use the system</li> <li><code>banned</code> User is blocked, and their contributions are hidden</li> <li><code>ldap_blocked</code> User has been blocked by the system</li> <li><code>blocked_pending_approval</code> User is blocked and pending approval</li> </ul> </li> <li> <p><code>merge_request.author.username</code> ; <code>string</code>. Username of the user. Unique within this instance of GitLab</p> </li> </ul>"},{"location":"gitlab/script-attributes/#current_user","title":"<code>current_user</code>","text":"<p>Get information about current user</p> <ul> <li><code>current_user.bot</code> ; <code>boolean</code>. Indicates if the user is a bot</li> <li><code>current_user.public_email</code> ; <code>optional string</code>. User\u2019s public email</li> <li> <p><code>current_user.state</code> (enum) State of the user</p> <p>The following values are valid:</p> <ul> <li><code>active</code> User is active and can use the system</li> <li><code>blocked</code> User has been blocked by an administrator and cannot use the system</li> <li><code>deactivated</code> User is no longer active and cannot use the system</li> <li><code>banned</code> User is blocked, and their contributions are hidden</li> <li><code>ldap_blocked</code> User has been blocked by the system</li> <li><code>blocked_pending_approval</code> User is blocked and pending approval</li> </ul> </li> <li> <p><code>current_user.username</code> ; <code>string</code>. Username of the user. Unique within this instance of GitLab</p> </li> </ul>"},{"location":"gitlab/script-attributes/#webhook_event","title":"<code>webhook_event</code>","text":"<p><code>webhook_event</code> attribute is only available in <code>server</code> mode</p> <p>You have access to the raw webhook event payload via <code>webhook_event.*</code> attributes (not listed below) in Expr script fields when using <code>server</code> mode.</p> <p>See the GitLab Webhook Events documentation for available fields.</p> <p>The attributes are named exactly as documented in the GitLab documentation.</p> <ul> <li><code>Comments</code> - A comment is made or edited on an issue or merge request.</li> <li><code>Merge request events</code> - A merge request is created, updated, or merged.</li> </ul>"},{"location":"gitlab/script-functions/","title":"Script Functions","text":"<p>The Expr Language Definition is a great resource to learn more about the language</p>"},{"location":"gitlab/script-functions/#merge_request","title":"merge_request","text":""},{"location":"gitlab/script-functions/#merge_request.state_is","title":"<code>merge_request.state_is(string...) -&gt; boolean</code>","text":"<p>Check if the <code>merge_request</code> state is any of the provided states</p> <p>Valid options:</p> <ul> <li><code>closed</code> - In closed state</li> <li><code>locked</code> - Discussion has been locked</li> <li><code>merged</code> - Merge request has been merged</li> <li><code>opened</code> - Opened merge request</li> </ul> <pre><code>merge_request.state_is(\"merged\")\nmerge_request.state_is(\"opened\", \"locked\")\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.state_is_not","title":"<code>merge_request.state_is_not(string...) -&gt; boolean</code>","text":"<p>Check if the <code>merge_request</code> state is NOT any of the provided states</p> <p>Valid options:</p> <ul> <li><code>closed</code> - In closed state</li> <li><code>locked</code> - Discussion has been locked</li> <li><code>merged</code> - Merge request has been merged</li> <li><code>opened</code> - Opened merge request</li> </ul> <pre><code>merge_request.state_is_not(\"merged\")\nmerge_request.state_is_not(\"opened\", \"locked\")\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.has_user_activity_within","title":"<code>merge_request.has_user_activity_within(duration|string...) -&gt; boolean</code>","text":"<p>This function EXCLUDE changes made by <code>scm-engine</code> and other bots, use <code>merge_request.has_no_activity_within</code> if you want to include those</p> <p>Return wether any user activity has happened with the provided duration.</p> <p>User is defined as, all users except:</p> <ul> <li>The account that <code>scm-engine</code> is running as.</li> <li>Other accounts marked as <code>bot</code> in their profile.</li> </ul> <p>Activity is defined as:</p> <ul> <li>Commits pushed to the Merge Request branch.</li> <li>Comments on the Merge Request itself (e.g. reviews and comments).</li> </ul> <pre><code>merge_request.has_user_activity_within(\"7d\")\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.has_no_user_activity_within","title":"<code>merge_request.has_no_user_activity_within(duration|string...) -&gt; boolean</code>","text":"<p>This function EXCLUDE changes made by <code>scm-engine</code> and other bots, use <code>merge_request.has_no_activity_within</code> if you want to exclude those</p> <p>Return wether no user activity has happened with the provided duration.</p> <p>User is defined as, all users except:</p> <ul> <li>The account that <code>scm-engine</code> is running as.</li> <li>Other accounts marked as <code>bot</code> in their profile.</li> </ul> <p>Activity is defined as:</p> <ul> <li>Commits pushed to the Merge Request branch.</li> <li>Comments on the Merge Request itself (e.g. reviews and comments).</li> </ul> <pre><code>merge_request.has_no_user_activity_within(\"7d\")\nmerge_request.has_no_user_activity_within(duration(\"7d\"))\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.has_activity_within","title":"<code>merge_request.has_activity_within(duration|string...) -&gt; boolean</code>","text":"<p>This function INCLUDE changes made by <code>scm-engine</code> and other bots, use <code>merge_request.has_user_activity_within</code> if you want to include those</p> <p>Return wether any activity has happened with the provided duration, including bots and the <code>scm-engine</code> account.</p> <p>Activity is defined as:</p> <ul> <li>Commits pushed to the Merge Request branch.</li> <li>Comments on the Merge Request itself (e.g. reviews and comments).</li> </ul> <pre><code>merge_request.has_activity_within(\"7d\")\nmerge_request.has_activity_within(duration(\"7d\"))\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.has_no_activity_within","title":"<code>merge_request.has_no_activity_within(duration|string...) -&gt; boolean</code>","text":"<p>This function INCLUDE changes made by <code>scm-engine</code> and other bots, use <code>merge_request.has_no_user_activity_within</code> if you want to exclude those</p> <p>Return wether no activity has happened with the provided duration, including bots and the <code>scm-engine</code> account.</p> <p>Activity is defined as:</p> <ul> <li>Commits pushed to the Merge Request branch.</li> <li>Comments on the Merge Request itself (e.g. reviews and comments).</li> </ul> <pre><code>merge_request.has_no_activity_within(\"7d\")\nmerge_request.has_no_activity_within(duration(\"7d\"))\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.modified_files","title":"<code>merge_request.modified_files(string...) -&gt; boolean</code>","text":"<p>Returns wether any of the provided files patterns have been modified in the Merge Request.</p> <p>The file patterns use the <code>.gitignore</code> format.</p> <pre><code>merge_request.modified_files(\"*.go\", \"docs/\") == true\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.modified_files_list","title":"<code>merge_request.modified_files_list(string...) -&gt; []string</code>","text":"<p>Returns an array of files matching the provided (optional) pattern thas has been modified in the Merge Request.</p> <p>The file patterns use the <code>.gitignore</code> format.</p> <pre><code>merge_request.modified_files_list(\"*.go\", \"docs/\") == [\"example/file.go\", \"docs/index.md\"]\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.has_label","title":"<code>merge_request.has_label(string) -&gt; boolean</code>","text":"<p>Returns wether any of the provided label exist on the Merge Request.</p> <pre><code>merge_request.labels = [\"hello\"]\nmerge_request.has_label(\"hello\") == true\nmerge_request.has_label(\"world\") == false\n</code></pre>"},{"location":"gitlab/script-functions/#merge_request.has_no_label","title":"<code>merge_request.has_no_label(string) -&gt; boolean</code>","text":"<p>Returns wether the merge request has the provided label or not.</p> <pre><code>merge_request.labels = [\"hello\"]\nmerge_request.has_no_label(\"hello\") == false\nmerge_request.has_no_label(\"world\") == true\n</code></pre>"},{"location":"gitlab/script-functions/#global","title":"Global","text":""},{"location":"gitlab/script-functions/#duration","title":"<code>duration(string) -&gt; duration</code>","text":"<p>Returns the <code>time.Duration</code> value of the given string str.</p> <p>Valid time units are \"ns\", \"us\" (or \"\u00b5s\"), \"ms\", \"s\", \"m\", \"h\", \"d\" and \"w\".</p> <pre><code>duration(\"1h\").Seconds() == 3600\n</code></pre>"},{"location":"gitlab/script-functions/#duration","title":"<code>since(time.Time) -&gt; duration</code>","text":"<p>Returns the <code>time.Duration</code> value since the provided <code>time</code>.</p> <pre><code>since(now() + duration(\"1h)) == 3600\n</code></pre>"},{"location":"gitlab/script-functions/#uniq","title":"<code>uniq([]string) -&gt; []string</code>","text":"<p>Returns a new array where all duplicate values has been removed.</p> <pre><code>([\"hello\", \"world\", \"world\"] | uniq) == [\"hello\", \"world\"]\n</code></pre>"},{"location":"gitlab/script-functions/#filepath_dir","title":"<code>filepath_dir</code>","text":"<p><code>filepath_dir</code> returns all but the last element of path, typically the path's directory. After dropping the final element,</p> <p>Dir calls Clean on the path and trailing slashes are removed.</p> <p>If the path is empty, <code>filepath_dir</code> returns \".\". If the path consists entirely of separators, <code>filepath_dir</code> returns a single separator.</p> <p>The returned path does not end in a separator unless it is the root directory.</p> <pre><code>filepath_dir(\"example/directory/file.go\") == \"example/directory\"\n</code></pre>"},{"location":"gitlab/script-functions/#limit_path_depth_to","title":"<code>limit_path_depth_to</code>","text":"<p><code>limit_path_depth_to</code> takes a path structure, and limits it to the configured maximum depth. Particularly useful when using <code>generated</code> labels from a directory structure, and want to to have a label naming scheme that only uses path of the path.</p> <pre><code>limit_path_depth_to(\"path1/path2/path3/path4\", 2), == \"path1/path2\"\nlimit_path_depth_to(\"path1/path2\", 3), == \"path1/path2\"\n</code></pre>"},{"location":"gitlab/setup/","title":"Setup","text":""},{"location":"gitlab/setup/#webhook-server","title":"Webhook Server","text":"<p>Using <code>scm-engine</code> as a webhook server allows for richer feature set compared to GitLab CI pipeline mode</p> <ul> <li> Real-time reactions to changes.</li> <li> Reacting to comments.</li> <li> Access to webhook event data in scripts via <code>webhook_event.*</code> (see server docs for more information).</li> <li> A single <code>scm-engine</code> instance (and single token) for your GitLab project, group, or instance depending on where you configure the webhook.</li> <li> Each Project still have their own <code>.scm-engine.yml</code> file, it's downloaded via the API when the server is processing a webhook event.</li> <li> A single \"bot\" identity across your projects.</li> <li> Turn key once configured; if a project want to use <code>scm-engine</code> they just need to create the <code>.scm-engine.yml</code> file in their project.</li> <li> No intuitive access to <code>evaluation</code> logs within GitLab (you can see them in the server logs or in the webhook failure log).</li> </ul> <p>Setup:</p> <ol> <li>Deploy <code>scm-engine</code> within your infrastructure in an environment that can communicate egress/ingress with GitLab. (see <code>server</code>)</li> <li>Configure your <code>webhook</code> at Project, Group, or Server level to hit the <code>/gitlab</code> endpoint on the <code>scm-engine</code> server endpoint. (see <code>server</code>)</li> </ol>"},{"location":"gitlab/setup/#gitlab-ci-pipeline","title":"GitLab-CI pipeline","text":"<p>Using <code>scm-engine</code> within a GitLab CI pipeline is straight forward - every time a CI pipeline runs, <code>scm-engine</code> will evaluate the Merge Request.</p> <ul> <li> Simple &amp; quick installation.</li> <li> Limited access token permissions.</li> <li> Easy access to <code>evaluation</code> logs within the GitLab CI job.</li> <li> Can't react to comments; only works within a CI pipeline.</li> <li> Higher latency for reacting to changes depending on how fast CI jobs run (and where in the pipeline it runs).</li> </ul> <p>Setup:</p> <ol> <li>Add a <code>.scm-engine.yml</code> file in the root of your project.</li> <li>Create a CI/CD Variable<ol> <li>Name must be <code>SCM_ENGINE_TOKEN</code></li> <li>Value must a Project Access Token<ol> <li>Must have <code>api</code> scope.</li> <li>Must have <code>developer</code> or <code>maintainer</code> role access so it can edit Merge Requests.</li> </ol> </li> <li><code>Mask</code> should be checked.</li> <li><code>Protected</code> should NOT be checked.</li> <li><code>Expand variable reference</code> should NOT be checked.</li> </ol> </li> <li> <p>Setup a CI job using the <code>scm-engine</code> Docker image that will run when a pipeline is created from a Merge Request Event.</p> <pre><code>scm-engine::evaluate::on-merge-request-event:\n  image: ghcr.io/jippi/scm-engine:latest\n  rules:\n    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'\n  script:\n    - scm-engine evaluate\n\nscm-engine::evaluate::on-schedule:\n  image: ghcr.io/jippi/scm-engine:latest\n  rules:\n    - if: $CI_PIPELINE_SOURCE == \"schedule\"\n  script:\n    - scm-engine evaluate all\n</code></pre> </li> <li> <p>Done! Every Merge Request change should now re-run scm-engine and apply your label rules</p> </li> </ol>"}]}